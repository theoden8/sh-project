#!/bin/bash


fname="lattice.json"
env python3 -c "
from graph_utils import *
from random import randint

if __name__ == '__main__':
    g = None
    with open('${fname}', 'r') as f:
        g = deserialize_digraph(f.read())
    g_nodes = list(g.nodes())
    n = len(g_nodes)
    row1 = shuffled(g_nodes)
    row2 = shuffled(g_nodes)
    for i in range(n):
        a = row1[randint(0, n-1)]
        b = row2[randint(0, n-1)]
        res = nx.has_path(g, a, b)
        print(a)
        print(b)
        print('YES' if res else 'NO')
" | while IFS= read -r gfile; do
    read hfile
    read result
    gap_res=$(./gap_is_homomorphic_gh "$gfile" "$hfile")
    echo "$gfile $hfile $gap_res $result"
    [ "$result" != "${gap_res}" ] && {
        >&2 echo "error: different results"
        [ "$result" = YES ] && {
            >&2 env python3 -c "
from graph_utils import *

if __name__ == '__main__':
    g = None
    with open('${fname}', 'r') as f:
        g = deserialize_digraph(f.read())
    print('erroneous path:', list(nx.shortest_path(g, '$gfile', '$hfile')))
"
        } || {
            sh_res=$(./solve_homomorphism.py "$gfile" "$hfile" | tail -1)
            [ -z "$(echo "$line" | grep fail)" ] && sh_res="YES" || sh_res="NO"

            [ "$sh_res" = "$gap_res" ] && {
                >&2 echo "error traced to the lattice"
            } || {
                >&2 echo "error traced to the solver $sh_res"
            }
        }
        cat > /dev/null
        exit 1
    }
done
